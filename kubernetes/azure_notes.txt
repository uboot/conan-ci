####################
# Virtual Machine  #
####################

Create VM
=========

az group create --name vm --location westeurope
az vm create --resource-group vm --name vm --image UbuntuLTS --admin-username azureuser --public-ip-address-dns-name <name> --size Standard_D2s_v3 --os-disk-size-gb 64
(Note: --generate-ssh-keys to automatically create a SSH key on the host)
ssh-copy-id -f -i <public-key> azureuser@<ip>

Manage VM
=========

az vm open-port -g vm --name vm --port 80 --priority 800
az vm open-port -g vm --name vm --port 6443 --priority 900
az vm deallocate -g vm --name vm
az vm start -g vm --name vm
az vm list-ip-addresses -g vm --name vm --output table

Build qcow2 Image
=================

ssh azureuser@<publicIpAddress>
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get install packer
sudo apt-get install qemu-system-x86
sudo usermod -a -G kvm $USER
git clone https://github.com/uboot/packer-windows.git
cd packer-windows
git checkout win-1909-qemu
exit
scp iso/en_windows_server_version_1909_updated_april_2020_x64_dvd_c2324f4e.iso azureuser@<publicIpAddress>:/home/azureuser/packer-windows/iso
scp iso/virtio-win-0.1.185.iso azureuser@13.80.19.139:/home/azureuser/packer-windows/iso
ssh azureuser@<publicIpAddress>
packer build --only=qemu --except=vagrant --var headless=true --var virtio_win_iso=./iso/virtio-win-0.1.185.iso --var iso_url=./iso/en_windows_server_version_1909_updated_april_2020_x64_dvd_c2324f4e.iso --var iso_checksum=2fa3edeca639868f7111db9aff637166f6093f5eb9b35f9b4fb5c2ed4dd0ed67 windows_server_1909_docker.json


Install Azure CLI
=================

curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
sudo apt-get update
sudo apt-get install azure-cli

Install Docker
==============

sudo apt-get install docker.io
sudo usermod -aG docker $USER
(sudo systemctl start docker)
(sudo systemctl enable docker)
sudo reboot

Install Helm
============

curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

####################
# Kubernetes       #
####################

Create Cluster
==============

az login
az account set --subscription "Visual Studio Professional-Abonnement"
az group create --name cluster --location westeurope
az aks create --resource-group cluster --name cluster --node-count 1 --node-vm-size Standard_D2s_v3 --generate-ssh-keys
az aks update --resource-group cluster --name cluster --attach-acr <registry> 
az aks get-credentials --resource-group cluster --name cluster --overwrite-existing
sudo az aks install-cli

Install Ingress
===============

helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
kubectl create namespace ingress-basic
helm install nginx-ingress ingress-nginx/ingress-nginx \
    --namespace ingress-basic \
    --set controller.replicaCount=2 \
    --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux
    
Install KubeVirt
================

export VERSION=v0.26.1
wget https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/virtctl-${VERSION}-linux-x86_64
sudo mv virtctl-v0.26.1-linux-x86_64 /usr/local/bin/virtctl
sudo chmod 700 /usr/local/bin/virtctl 

VERSION=v0.38.1
kubectl create namespace kubevirt
kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-operator.yaml
kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-cr.yaml

export VERSION=$(curl -s https://github.com/kubevirt/containerized-data-importer/releases/latest | grep -o "v[0-9]\.[0-9]*\.[0-9]*")
kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-operator.yaml
kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-cr.yaml

kubectl -n ingress-basic get services -o wide -w nginx-ingress-ingress-nginx-controller
kubectl -n cdi apply -f kubernetes/cdi/ingress.yaml
virtctl image-upload dv windows-server-1909 --size=30Gi --image-path WindowsServer1909Docker --uploadproxy-url=https://<EXTERNAL_IP> --insecure

    
Delete Cluster
==============

az group delete --name cluster --yes --no-wait


####################
# Docker Registry  #
####################

Create Registry
===============

az group create --name registry --location westeurope
az acr create --resource-group registry --name <registry> --sku Basic
az acr login --name <registry>
az acr credential show --name <registry>

Build Docker Images
===================

az acr build --image msvc15:1.0 --platform windows --registry <registry> --file Dockerfile .
az acr build --image windows1909:1.0 --registry <registry> --file Dockerfile.windows_1909_docker windows_server_1909_docker-qemu/



####################
# Ansible          #
####################

ansible-galaxy collection install community.docker
ansible-playbook -u azureuser -i <target>, deployment/playbook.yml
