# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EcosystemAttributes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, user: str=None, settings: str=None, public_ssh_key: str=None, known_hosts: str=None):  # noqa: E501
        """EcosystemAttributes - a model defined in Swagger

        :param name: The name of this EcosystemAttributes.  # noqa: E501
        :type name: str
        :param user: The user of this EcosystemAttributes.  # noqa: E501
        :type user: str
        :param settings: The settings of this EcosystemAttributes.  # noqa: E501
        :type settings: str
        :param public_ssh_key: The public_ssh_key of this EcosystemAttributes.  # noqa: E501
        :type public_ssh_key: str
        :param known_hosts: The known_hosts of this EcosystemAttributes.  # noqa: E501
        :type known_hosts: str
        """
        self.swagger_types = {
            'name': str,
            'user': str,
            'settings': str,
            'public_ssh_key': str,
            'known_hosts': str
        }

        self.attribute_map = {
            'name': 'name',
            'user': 'user',
            'settings': 'settings',
            'public_ssh_key': 'public_ssh_key',
            'known_hosts': 'known_hosts'
        }
        self._name = name
        self._user = user
        self._settings = settings
        self._public_ssh_key = public_ssh_key
        self._known_hosts = known_hosts

    @classmethod
    def from_dict(cls, dikt) -> 'EcosystemAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ecosystem_attributes of this EcosystemAttributes.  # noqa: E501
        :rtype: EcosystemAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this EcosystemAttributes.


        :return: The name of this EcosystemAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EcosystemAttributes.


        :param name: The name of this EcosystemAttributes.
        :type name: str
        """

        self._name = name

    @property
    def user(self) -> str:
        """Gets the user of this EcosystemAttributes.


        :return: The user of this EcosystemAttributes.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this EcosystemAttributes.


        :param user: The user of this EcosystemAttributes.
        :type user: str
        """

        self._user = user

    @property
    def settings(self) -> str:
        """Gets the settings of this EcosystemAttributes.


        :return: The settings of this EcosystemAttributes.
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings: str):
        """Sets the settings of this EcosystemAttributes.


        :param settings: The settings of this EcosystemAttributes.
        :type settings: str
        """

        self._settings = settings

    @property
    def public_ssh_key(self) -> str:
        """Gets the public_ssh_key of this EcosystemAttributes.


        :return: The public_ssh_key of this EcosystemAttributes.
        :rtype: str
        """
        return self._public_ssh_key

    @public_ssh_key.setter
    def public_ssh_key(self, public_ssh_key: str):
        """Sets the public_ssh_key of this EcosystemAttributes.


        :param public_ssh_key: The public_ssh_key of this EcosystemAttributes.
        :type public_ssh_key: str
        """

        self._public_ssh_key = public_ssh_key

    @property
    def known_hosts(self) -> str:
        """Gets the known_hosts of this EcosystemAttributes.


        :return: The known_hosts of this EcosystemAttributes.
        :rtype: str
        """
        return self._known_hosts

    @known_hosts.setter
    def known_hosts(self, known_hosts: str):
        """Sets the known_hosts of this EcosystemAttributes.


        :param known_hosts: The known_hosts of this EcosystemAttributes.
        :type known_hosts: str
        """

        self._known_hosts = known_hosts
