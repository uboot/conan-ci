# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.commit import Commit  # noqa: F401,E501
from swagger_server.models.profile import Profile  # noqa: F401,E501
from swagger_server import util


class Build(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, status: str=None, commit: Commit=None, profile: Profile=None):  # noqa: E501
        """Build - a model defined in Swagger

        :param id: The id of this Build.  # noqa: E501
        :type id: int
        :param status: The status of this Build.  # noqa: E501
        :type status: str
        :param commit: The commit of this Build.  # noqa: E501
        :type commit: Commit
        :param profile: The profile of this Build.  # noqa: E501
        :type profile: Profile
        """
        self.swagger_types = {
            'id': int,
            'status': str,
            'commit': Commit,
            'profile': Profile
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'commit': 'commit',
            'profile': 'profile'
        }
        self._id = id
        self._status = status
        self._commit = commit
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt) -> 'Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Build of this Build.  # noqa: E501
        :rtype: Build
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Build.


        :return: The id of this Build.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Build.


        :param id: The id of this Build.
        :type id: int
        """

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this Build.


        :return: The status of this Build.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Build.


        :param status: The status of this Build.
        :type status: str
        """
        allowed_values = ["active", "error", "new", "stopped", "stopping", "success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def commit(self) -> Commit:
        """Gets the commit of this Build.


        :return: The commit of this Build.
        :rtype: Commit
        """
        return self._commit

    @commit.setter
    def commit(self, commit: Commit):
        """Sets the commit of this Build.


        :param commit: The commit of this Build.
        :type commit: Commit
        """

        self._commit = commit

    @property
    def profile(self) -> Profile:
        """Gets the profile of this Build.


        :return: The profile of this Build.
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile: Profile):
        """Sets the profile of this Build.


        :param profile: The profile of this Build.
        :type profile: Profile
        """

        self._profile = profile
