openapi: 3.0.0
info:
  title: Conan-CI Public
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
servers:
- url: /api/v1
paths:
  /ping:
    get:
      tags:
      - General
      summary: ping the service
      operationId: ping
      responses:
        "200":
          description: success
      x-openapi-router-controller: swagger_server.controllers.general_controller
  /process-repos:
    get:
      tags:
      - General
      summary: scan repos for new commits
      operationId: process_repos
      responses:
        "200":
          description: success
      x-openapi-router-controller: swagger_server.controllers.general_controller
  /populate-database:
    get:
      tags:
      - General
      summary: populate the database with sample data
      operationId: populate_database
      responses:
        "200":
          description: success
      x-openapi-router-controller: swagger_server.controllers.general_controller
  /clear-database:
    get:
      tags:
      - General
      summary: remove all entries from the database
      operationId: clear_database
      responses:
        "200":
          description: success
      x-openapi-router-controller: swagger_server.controllers.general_controller
  /clear-ecosystems:
    get:
      tags:
      - General
      summary: remove all entries but the ecosystems from the database
      operationId: clear_ecosystems
      responses:
        "200":
          description: success
      x-openapi-router-controller: swagger_server.controllers.general_controller
  /ecosystem:
    get:
      tags:
      - Ecosystem
      summary: get all ecosystems
      operationId: get_ecosystems
      responses:
        "200":
          description: list of ecosystems
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemList'
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.ecosystem_controller
    post:
      tags:
      - Ecosystem
      summary: add a new ecosystem
      operationId: add_ecosystem
      requestBody:
        description: ecosystem to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EcosystemData'
      responses:
        "201":
          description: ecosystem created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemData'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.ecosystem_controller
  /ecosystem/{ecosystemId}:
    get:
      tags:
      - Ecosystem
      summary: get an ecosystem
      operationId: get_ecosystem
      parameters:
      - name: ecosystemId
        in: path
        description: ecosystem ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: ecosystem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemData'
        "400":
          description: invalid ID supplied
        "404":
          description: ecosystem not found
      x-openapi-router-controller: swagger_server.controllers.ecosystem_controller
    delete:
      tags:
      - Ecosystem
      summary: delete an ecosystem
      operationId: delete_ecosystem
      parameters:
      - name: ecosystemId
        in: path
        description: ecosystem id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: ecosystem deleted
        "400":
          description: invalid ID supplied
        "404":
          description: ecosystem not found
      x-openapi-router-controller: swagger_server.controllers.ecosystem_controller
    patch:
      tags:
      - Ecosystem
      summary: update an ecosystem
      operationId: update_ecosystem
      parameters:
      - name: ecosystemId
        in: path
        description: id of the ecosystem to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: ecosystem updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EcosystemData'
      responses:
        "200":
          description: updated ecosystem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemData'
        "400":
          description: invalid input, object invalid
        "404":
          description: ecosystem not found
      x-openapi-router-controller: swagger_server.controllers.ecosystem_controller
  /ecosystem/{ecosystemId}/repo:
    get:
      tags:
      - Repo
      summary: get repos of an ecosystem
      operationId: get_repos
      parameters:
      - name: ecosystemId
        in: path
        description: ecosystem
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: list of repos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoList'
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.repo_controller
  /repo:
    post:
      tags:
      - Repo
      summary: add a new repo
      operationId: add_repo
      requestBody:
        description: repo to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoData'
      responses:
        "201":
          description: repo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoData'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.repo_controller
  /repo/{repoId}:
    get:
      tags:
      - Repo
      summary: get a repo
      operationId: get_repo
      parameters:
      - name: repoId
        in: path
        description: repo ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: repo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoData'
        "400":
          description: invalid ID supplied
        "404":
          description: repo not found
      x-openapi-router-controller: swagger_server.controllers.repo_controller
    delete:
      tags:
      - Repo
      summary: delete a repo
      operationId: delete_repo
      parameters:
      - name: repoId
        in: path
        description: repo ID to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: repo deleted
        "400":
          description: invalid ID supplied
        "404":
          description: repo not found
      x-openapi-router-controller: swagger_server.controllers.repo_controller
    patch:
      tags:
      - Repo
      summary: update a repo
      operationId: update_repo
      parameters:
      - name: repoId
        in: path
        description: id of the repo to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: repo updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoData'
      responses:
        "200":
          description: updated repo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoData'
        "400":
          description: invalid input, object invalid
        "404":
          description: repo not found
      x-openapi-router-controller: swagger_server.controllers.repo_controller
  /profile:
    post:
      tags:
      - Profile
      summary: add a new profile
      operationId: add_profile
      requestBody:
        description: profile to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileData'
      responses:
        "201":
          description: profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileData'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.profile_controller
  /profile/{profileId}:
    get:
      tags:
      - Profile
      summary: get a profile
      operationId: get_profile
      parameters:
      - name: profileId
        in: path
        description: profile ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileData'
        "400":
          description: invalid ID supplied
        "404":
          description: profile not found
      x-openapi-router-controller: swagger_server.controllers.profile_controller
    delete:
      tags:
      - Profile
      summary: delete a profile
      operationId: delete_profile
      parameters:
      - name: profileId
        in: path
        description: profile id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: profile deleted
        "400":
          description: invalid ID supplied
        "404":
          description: profile not found
      x-openapi-router-controller: swagger_server.controllers.profile_controller
    patch:
      tags:
      - Profile
      summary: update a profile
      operationId: update_profile
      parameters:
      - name: profileId
        in: path
        description: id of the profile to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: profile updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileData'
      responses:
        "200":
          description: updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileData'
        "400":
          description: invalid input, object invalid
        "404":
          description: profile not found
      x-openapi-router-controller: swagger_server.controllers.profile_controller
  /repo/{repoId}/commit:
    get:
      tags:
      - Commit
      summary: get the commits of a repo
      operationId: get_commits
      parameters:
      - name: repoId
        in: path
        description: repo
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: list of commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitList'
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.commit_controller
  /commit/{commitId}:
    get:
      tags:
      - Commit
      summary: get a commit
      operationId: get_commit
      parameters:
      - name: commitId
        in: path
        description: commit ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: commit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitData'
        "400":
          description: invalid ID supplied
        "404":
          description: commit not found
      x-openapi-router-controller: swagger_server.controllers.commit_controller
  /channel:
    post:
      tags:
      - Channel
      summary: add a new channel
      operationId: add_channel
      requestBody:
        description: channel to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelData'
      responses:
        "201":
          description: channel created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.channel_controller
  /channel/{channelId}:
    get:
      tags:
      - Channel
      summary: get a channel
      operationId: get_channel
      parameters:
      - name: channelId
        in: path
        description: channel ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
        "400":
          description: invalid ID supplied
        "404":
          description: channel not found
      x-openapi-router-controller: swagger_server.controllers.channel_controller
    delete:
      tags:
      - Channel
      summary: delete a channel
      operationId: delete_channel
      parameters:
      - name: channelId
        in: path
        description: channel ID to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: channel deleted
        "400":
          description: invalid ID supplied
        "404":
          description: channel not found
      x-openapi-router-controller: swagger_server.controllers.channel_controller
    patch:
      tags:
      - Channel
      summary: update a channel
      operationId: update_channel
      parameters:
      - name: channelId
        in: path
        description: id of the channel to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Channel updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelData'
      responses:
        "200":
          description: updated channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
        "400":
          description: invalid input, object invalid
        "404":
          description: channel not found
      x-openapi-router-controller: swagger_server.controllers.channel_controller
  /ecosystem/{ecosystemId}/build:
    get:
      tags:
      - Build
      summary: get builds of an ecosystem
      operationId: get_builds
      parameters:
      - name: ecosystemId
        in: path
        description: ecosystem
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: list of builds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildList'
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.build_controller
  /build/{buildId}:
    get:
      tags:
      - Build
      summary: get a build
      operationId: get_build
      parameters:
      - name: buildId
        in: path
        description: build ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildData'
        "400":
          description: invalid ID supplied
        "404":
          description: build not found
      x-openapi-router-controller: swagger_server.controllers.build_controller
    patch:
      tags:
      - Build
      summary: update a build
      operationId: update_build
      parameters:
      - name: buildId
        in: path
        description: id of the build to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: updated build data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildData'
      responses:
        "200":
          description: updated build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildData'
        "400":
          description: invalid input, object invalid
        "404":
          description: build not found
      x-openapi-router-controller: swagger_server.controllers.build_controller
components:
  schemas:
    Ecosystem:
      required:
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: ecosytems
        attributes:
          $ref: '#/components/schemas/Ecosystem_attributes'
        relationships:
          $ref: '#/components/schemas/Ecosystem_relationships'
      example:
        relationships:
          channels:
            data:
            - id: 1
              type: channels
            - id: 1
              type: channels
          repos:
            links:
              related: repos
          builds:
            links:
              related: builds
          profiles:
            data:
            - id: 1
              type: profiles
            - id: 1
              type: profiles
        attributes:
          settings: ""
          name: My Company
          known_hosts: Z2l0aHViLmNvbSwxNDAuODIuMTIxLjQgc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBQkl3QUFBUUVBcTJBN2hSR21kbm05dFVEYk85SURTd0JLNlRiUWErUFhZUENQeTZyYlRyVHR3N1BIa2NjS3JwcDB5VmhwNUhkRUljS3I2cExsVkRCZk9MWDlRVXN5Q09WMHd6ZmpJSk5sR0VZc2RsTEppekhoYm4ybVVqdlNBSFFxWkVUWVA4MWVGekxRTm5QSHQ0RVZWVWg3VmZERVNVODRLZXptRDVRbFdwWExtdlUzMS95TWYrU2U4eGhIVHZLU0NaSUZJbVd3b0c2bWJVb1dmOW56cElvYVNqQit3ZXFxVVVtcGFhYXNYVmFsNzJKK1VYMkIrMlJQVzNSY1QwZU96UWdxbEpMM1JLclRKdmRzakUzSkVBdkdxM2xHSFNaWHkyOEczc2t1YTJTbVZpL3c0eUNFNmdiT0RxblRXbGc3K3dDNjA0eWRHWEE4VkppUzVhcDQzSlhpVUZGQWFRPT0K
          user: mycompany
          public_ssh_key: ""
        id: 1
        type: ecosytems
    EcosystemData:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Ecosystem'
      example:
        data:
          relationships:
            channels:
              data:
              - id: 1
                type: channels
              - id: 1
                type: channels
            repos:
              links:
                related: repos
            builds:
              links:
                related: builds
            profiles:
              data:
              - id: 1
                type: profiles
              - id: 1
                type: profiles
          attributes:
            settings: ""
            name: My Company
            known_hosts: Z2l0aHViLmNvbSwxNDAuODIuMTIxLjQgc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBQkl3QUFBUUVBcTJBN2hSR21kbm05dFVEYk85SURTd0JLNlRiUWErUFhZUENQeTZyYlRyVHR3N1BIa2NjS3JwcDB5VmhwNUhkRUljS3I2cExsVkRCZk9MWDlRVXN5Q09WMHd6ZmpJSk5sR0VZc2RsTEppekhoYm4ybVVqdlNBSFFxWkVUWVA4MWVGekxRTm5QSHQ0RVZWVWg3VmZERVNVODRLZXptRDVRbFdwWExtdlUzMS95TWYrU2U4eGhIVHZLU0NaSUZJbVd3b0c2bWJVb1dmOW56cElvYVNqQit3ZXFxVVVtcGFhYXNYVmFsNzJKK1VYMkIrMlJQVzNSY1QwZU96UWdxbEpMM1JLclRKdmRzakUzSkVBdkdxM2xHSFNaWHkyOEczc2t1YTJTbVZpL3c0eUNFNmdiT0RxblRXbGc3K3dDNjA0eWRHWEE4VkppUzVhcDQzSlhpVUZGQWFRPT0K
            user: mycompany
            public_ssh_key: ""
          id: 1
          type: ecosytems
    EcosystemList:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ecosystem'
      example:
        data:
        - relationships:
            channels:
              data:
              - id: 1
                type: channels
              - id: 1
                type: channels
            repos:
              links:
                related: repos
            builds:
              links:
                related: builds
            profiles:
              data:
              - id: 1
                type: profiles
              - id: 1
                type: profiles
          attributes:
            settings: ""
            name: My Company
            known_hosts: Z2l0aHViLmNvbSwxNDAuODIuMTIxLjQgc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBQkl3QUFBUUVBcTJBN2hSR21kbm05dFVEYk85SURTd0JLNlRiUWErUFhZUENQeTZyYlRyVHR3N1BIa2NjS3JwcDB5VmhwNUhkRUljS3I2cExsVkRCZk9MWDlRVXN5Q09WMHd6ZmpJSk5sR0VZc2RsTEppekhoYm4ybVVqdlNBSFFxWkVUWVA4MWVGekxRTm5QSHQ0RVZWVWg3VmZERVNVODRLZXptRDVRbFdwWExtdlUzMS95TWYrU2U4eGhIVHZLU0NaSUZJbVd3b0c2bWJVb1dmOW56cElvYVNqQit3ZXFxVVVtcGFhYXNYVmFsNzJKK1VYMkIrMlJQVzNSY1QwZU96UWdxbEpMM1JLclRKdmRzakUzSkVBdkdxM2xHSFNaWHkyOEczc2t1YTJTbVZpL3c0eUNFNmdiT0RxblRXbGc3K3dDNjA0eWRHWEE4VkppUzVhcDQzSlhpVUZGQWFRPT0K
            user: mycompany
            public_ssh_key: ""
          id: 1
          type: ecosytems
        - relationships:
            channels:
              data:
              - id: 1
                type: channels
              - id: 1
                type: channels
            repos:
              links:
                related: repos
            builds:
              links:
                related: builds
            profiles:
              data:
              - id: 1
                type: profiles
              - id: 1
                type: profiles
          attributes:
            settings: ""
            name: My Company
            known_hosts: Z2l0aHViLmNvbSwxNDAuODIuMTIxLjQgc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBQkl3QUFBUUVBcTJBN2hSR21kbm05dFVEYk85SURTd0JLNlRiUWErUFhZUENQeTZyYlRyVHR3N1BIa2NjS3JwcDB5VmhwNUhkRUljS3I2cExsVkRCZk9MWDlRVXN5Q09WMHd6ZmpJSk5sR0VZc2RsTEppekhoYm4ybVVqdlNBSFFxWkVUWVA4MWVGekxRTm5QSHQ0RVZWVWg3VmZERVNVODRLZXptRDVRbFdwWExtdlUzMS95TWYrU2U4eGhIVHZLU0NaSUZJbVd3b0c2bWJVb1dmOW56cElvYVNqQit3ZXFxVVVtcGFhYXNYVmFsNzJKK1VYMkIrMlJQVzNSY1QwZU96UWdxbEpMM1JLclRKdmRzakUzSkVBdkdxM2xHSFNaWHkyOEczc2t1YTJTbVZpL3c0eUNFNmdiT0RxblRXbGc3K3dDNjA0eWRHWEE4VkppUzVhcDQzSlhpVUZGQWFRPT0K
            user: mycompany
            public_ssh_key: ""
          id: 1
          type: ecosytems
    Repo:
      required:
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: repos
        attributes:
          $ref: '#/components/schemas/Repo_attributes'
        relationships:
          $ref: '#/components/schemas/Repo_relationships'
      example:
        relationships:
          ecosystem:
            data:
              id: 1
              type: ecosystems
          commits:
            links:
              related: commit
        attributes:
          path: packages/hello
          name: Conan CI
          url: https://github.com/uboot/conan-ci.git
        id: 1
        type: repos
    RepoData:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Repo'
      example:
        data:
          relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
            commits:
              links:
                related: commit
          attributes:
            path: packages/hello
            name: Conan CI
            url: https://github.com/uboot/conan-ci.git
          id: 1
          type: repos
    RepoList:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Repo'
      example:
        data:
        - relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
            commits:
              links:
                related: commit
          attributes:
            path: packages/hello
            name: Conan CI
            url: https://github.com/uboot/conan-ci.git
          id: 1
          type: repos
        - relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
            commits:
              links:
                related: commit
          attributes:
            path: packages/hello
            name: Conan CI
            url: https://github.com/uboot/conan-ci.git
          id: 1
          type: repos
    Profile:
      required:
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: profiles
        attributes:
          $ref: '#/components/schemas/Profile_attributes'
        relationships:
          $ref: '#/components/schemas/Profile_relationships'
      example:
        relationships:
          ecosystem:
            data:
              id: 1
              type: ecosystems
        attributes:
          container: conanio/gcc9
          settings:
          - value: Release
            key: build_type
          - value: Release
            key: build_type
          name: GCC 9
        id: 1
        type: profiles
    ProfileData:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Profile'
      example:
        data:
          relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
          attributes:
            container: conanio/gcc9
            settings:
            - value: Release
              key: build_type
            - value: Release
              key: build_type
            name: GCC 9
          id: 1
          type: profiles
    Channel:
      required:
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: channels
        attributes:
          $ref: '#/components/schemas/Channel_attributes'
        relationships:
          $ref: '#/components/schemas/Profile_relationships'
      example:
        relationships:
          ecosystem:
            data:
              id: 1
              type: ecosystems
        attributes:
          name: stable
          branch: master
        id: 1
        type: channels
    ChannelData:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Channel'
      example:
        data:
          relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
          attributes:
            name: stable
            branch: master
          id: 1
          type: channels
    Commit:
      required:
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: commits
        attributes:
          $ref: '#/components/schemas/Commit_attributes'
        relationships:
          $ref: '#/components/schemas/Commit_relationships'
      example:
        relationships:
          repo:
            data:
              id: 1
              type: repos
          channel:
            data:
              id: 1
              type: channels
          builds:
            data:
            - id: 1
              type: builds
            - id: 1
              type: builds
        attributes:
          sha: 2777a37dc82e296d55c23f738b79f139e627920c
        id: 1
        type: commits
    CommitData:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Commit'
      example:
        data:
          relationships:
            repo:
              data:
                id: 1
                type: repos
            channel:
              data:
                id: 1
                type: channels
            builds:
              data:
              - id: 1
                type: builds
              - id: 1
                type: builds
          attributes:
            sha: 2777a37dc82e296d55c23f738b79f139e627920c
          id: 1
          type: commits
    CommitList:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Commit'
      example:
        data:
        - relationships:
            repo:
              data:
                id: 1
                type: repos
            channel:
              data:
                id: 1
                type: channels
            builds:
              data:
              - id: 1
                type: builds
              - id: 1
                type: builds
          attributes:
            sha: 2777a37dc82e296d55c23f738b79f139e627920c
          id: 1
          type: commits
        - relationships:
            repo:
              data:
                id: 1
                type: repos
            channel:
              data:
                id: 1
                type: channels
            builds:
              data:
              - id: 1
                type: builds
              - id: 1
                type: builds
          attributes:
            sha: 2777a37dc82e296d55c23f738b79f139e627920c
          id: 1
          type: commits
    Build:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: builds
        attributes:
          $ref: '#/components/schemas/Build_attributes'
        relationships:
          $ref: '#/components/schemas/Build_relationships'
      example:
        relationships:
          ecosystem:
            data:
              id: 1
              type: ecosystems
          profile:
            data:
              id: 1
              type: profiles
          commit:
            data:
              id: 1
              type: commits
        attributes:
          status: new
        id: 1
        type: builds
    BuildData:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Build'
      example:
        data:
          relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
            profile:
              data:
                id: 1
                type: profiles
            commit:
              data:
                id: 1
                type: commits
          attributes:
            status: new
          id: 1
          type: builds
    BuildList:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Build'
      example:
        data:
        - relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
            profile:
              data:
                id: 1
                type: profiles
            commit:
              data:
                id: 1
                type: commits
          attributes:
            status: new
          id: 1
          type: builds
        - relationships:
            ecosystem:
              data:
                id: 1
                type: ecosystems
            profile:
              data:
                id: 1
                type: profiles
            commit:
              data:
                id: 1
                type: commits
          attributes:
            status: new
          id: 1
          type: builds
    Ecosystem_attributes:
      type: object
      properties:
        name:
          type: string
          example: My Company
        user:
          type: string
          example: mycompany
        settings:
          type: string
          example: ""
        public_ssh_key:
          type: string
          example: ""
        known_hosts:
          type: string
          example: Z2l0aHViLmNvbSwxNDAuODIuMTIxLjQgc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBQkl3QUFBUUVBcTJBN2hSR21kbm05dFVEYk85SURTd0JLNlRiUWErUFhZUENQeTZyYlRyVHR3N1BIa2NjS3JwcDB5VmhwNUhkRUljS3I2cExsVkRCZk9MWDlRVXN5Q09WMHd6ZmpJSk5sR0VZc2RsTEppekhoYm4ybVVqdlNBSFFxWkVUWVA4MWVGekxRTm5QSHQ0RVZWVWg3VmZERVNVODRLZXptRDVRbFdwWExtdlUzMS95TWYrU2U4eGhIVHZLU0NaSUZJbVd3b0c2bWJVb1dmOW56cElvYVNqQit3ZXFxVVVtcGFhYXNYVmFsNzJKK1VYMkIrMlJQVzNSY1QwZU96UWdxbEpMM1JLclRKdmRzakUzSkVBdkdxM2xHSFNaWHkyOEczc2t1YTJTbVZpL3c0eUNFNmdiT0RxblRXbGc3K3dDNjA0eWRHWEE4VkppUzVhcDQzSlhpVUZGQWFRPT0K
      example:
        settings: ""
        name: My Company
        known_hosts: Z2l0aHViLmNvbSwxNDAuODIuMTIxLjQgc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBQkl3QUFBUUVBcTJBN2hSR21kbm05dFVEYk85SURTd0JLNlRiUWErUFhZUENQeTZyYlRyVHR3N1BIa2NjS3JwcDB5VmhwNUhkRUljS3I2cExsVkRCZk9MWDlRVXN5Q09WMHd6ZmpJSk5sR0VZc2RsTEppekhoYm4ybVVqdlNBSFFxWkVUWVA4MWVGekxRTm5QSHQ0RVZWVWg3VmZERVNVODRLZXptRDVRbFdwWExtdlUzMS95TWYrU2U4eGhIVHZLU0NaSUZJbVd3b0c2bWJVb1dmOW56cElvYVNqQit3ZXFxVVVtcGFhYXNYVmFsNzJKK1VYMkIrMlJQVzNSY1QwZU96UWdxbEpMM1JLclRKdmRzakUzSkVBdkdxM2xHSFNaWHkyOEczc2t1YTJTbVZpL3c0eUNFNmdiT0RxblRXbGc3K3dDNjA0eWRHWEE4VkppUzVhcDQzSlhpVUZGQWFRPT0K
        user: mycompany
        public_ssh_key: ""
    Ecosystem_relationships_builds_links:
      type: object
      properties:
        related:
          type: string
          format: uri
          example: builds
      example:
        related: builds
    Ecosystem_relationships_builds:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/Ecosystem_relationships_builds_links'
      example:
        links:
          related: builds
    Ecosystem_relationships_channels_data:
      type: object
      properties:
        type:
          type: string
          example: channels
        id:
          type: integer
          format: int64
          example: 1
      example:
        id: 1
        type: channels
    Ecosystem_relationships_channels:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ecosystem_relationships_channels_data'
      example:
        data:
        - id: 1
          type: channels
        - id: 1
          type: channels
    Ecosystem_relationships_profiles_data:
      type: object
      properties:
        type:
          type: string
          example: profiles
        id:
          type: integer
          format: int64
          example: 1
      example:
        id: 1
        type: profiles
    Ecosystem_relationships_profiles:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ecosystem_relationships_profiles_data'
      example:
        data:
        - id: 1
          type: profiles
        - id: 1
          type: profiles
    Ecosystem_relationships_repos_links:
      type: object
      properties:
        related:
          type: string
          format: uri
          example: repos
      example:
        related: repos
    Ecosystem_relationships_repos:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/Ecosystem_relationships_repos_links'
      example:
        links:
          related: repos
    Ecosystem_relationships:
      type: object
      properties:
        builds:
          $ref: '#/components/schemas/Ecosystem_relationships_builds'
        channels:
          $ref: '#/components/schemas/Ecosystem_relationships_channels'
        profiles:
          $ref: '#/components/schemas/Ecosystem_relationships_profiles'
        repos:
          $ref: '#/components/schemas/Ecosystem_relationships_repos'
      example:
        channels:
          data:
          - id: 1
            type: channels
          - id: 1
            type: channels
        repos:
          links:
            related: repos
        builds:
          links:
            related: builds
        profiles:
          data:
          - id: 1
            type: profiles
          - id: 1
            type: profiles
    Repo_attributes:
      type: object
      properties:
        name:
          type: string
          example: Conan CI
        url:
          type: string
          example: https://github.com/uboot/conan-ci.git
        path:
          type: string
          example: packages/hello
      example:
        path: packages/hello
        name: Conan CI
        url: https://github.com/uboot/conan-ci.git
    Repo_relationships_ecosystem_data:
      type: object
      properties:
        type:
          type: string
          example: ecosystems
        id:
          type: integer
          format: int64
          example: 1
      example:
        id: 1
        type: ecosystems
    Repo_relationships_ecosystem:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Repo_relationships_ecosystem_data'
      example:
        data:
          id: 1
          type: ecosystems
    Repo_relationships_commits_links:
      type: object
      properties:
        related:
          type: string
          format: uri
          example: commit
      example:
        related: commit
    Repo_relationships_commits:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/Repo_relationships_commits_links'
      example:
        links:
          related: commit
    Repo_relationships:
      type: object
      properties:
        ecosystem:
          $ref: '#/components/schemas/Repo_relationships_ecosystem'
        commits:
          $ref: '#/components/schemas/Repo_relationships_commits'
      example:
        ecosystem:
          data:
            id: 1
            type: ecosystems
        commits:
          links:
            related: commit
    Profile_attributes_settings:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
          example: build_type
        value:
          type: string
          example: Release
      example:
        value: Release
        key: build_type
    Profile_attributes:
      type: object
      properties:
        name:
          type: string
          example: GCC 9
        container:
          type: string
          example: conanio/gcc9
        settings:
          type: array
          items:
            $ref: '#/components/schemas/Profile_attributes_settings'
      example:
        container: conanio/gcc9
        settings:
        - value: Release
          key: build_type
        - value: Release
          key: build_type
        name: GCC 9
    Profile_relationships:
      type: object
      properties:
        ecosystem:
          $ref: '#/components/schemas/Repo_relationships_ecosystem'
      example:
        ecosystem:
          data:
            id: 1
            type: ecosystems
    Channel_attributes:
      type: object
      properties:
        name:
          type: string
          example: stable
        branch:
          type: string
          example: master
      example:
        name: stable
        branch: master
    Commit_attributes:
      type: object
      properties:
        sha:
          type: string
          example: 2777a37dc82e296d55c23f738b79f139e627920c
      example:
        sha: 2777a37dc82e296d55c23f738b79f139e627920c
    Commit_relationships_repo_data:
      type: object
      properties:
        type:
          type: string
          example: repos
        id:
          type: integer
          format: int64
          example: 1
      example:
        id: 1
        type: repos
    Commit_relationships_repo:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Commit_relationships_repo_data'
      example:
        data:
          id: 1
          type: repos
    Commit_relationships_channel:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Ecosystem_relationships_channels_data'
      example:
        data:
          id: 1
          type: channels
    Commit_relationships_builds_data:
      type: object
      properties:
        type:
          type: string
          example: builds
        id:
          type: integer
          format: int64
          example: 1
      example:
        id: 1
        type: builds
    Commit_relationships_builds:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Commit_relationships_builds_data'
      example:
        data:
        - id: 1
          type: builds
        - id: 1
          type: builds
    Commit_relationships:
      type: object
      properties:
        repo:
          $ref: '#/components/schemas/Commit_relationships_repo'
        channel:
          $ref: '#/components/schemas/Commit_relationships_channel'
        builds:
          $ref: '#/components/schemas/Commit_relationships_builds'
      example:
        repo:
          data:
            id: 1
            type: repos
        channel:
          data:
            id: 1
            type: channels
        builds:
          data:
          - id: 1
            type: builds
          - id: 1
            type: builds
    Build_attributes:
      type: object
      properties:
        status:
          type: string
          example: new
          enum:
          - active
          - error
          - new
          - stopped
          - stopping
          - success
      example:
        status: new
    Build_relationships_commit_data:
      type: object
      properties:
        type:
          type: string
          example: commits
        id:
          type: integer
          format: int64
          example: 1
      example:
        id: 1
        type: commits
    Build_relationships_commit:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Build_relationships_commit_data'
      example:
        data:
          id: 1
          type: commits
    Build_relationships_profile:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Ecosystem_relationships_profiles_data'
      example:
        data:
          id: 1
          type: profiles
    Build_relationships:
      type: object
      properties:
        ecosystem:
          $ref: '#/components/schemas/Repo_relationships_ecosystem'
        commit:
          $ref: '#/components/schemas/Build_relationships_commit'
        profile:
          $ref: '#/components/schemas/Build_relationships_profile'
      example:
        ecosystem:
          data:
            id: 1
            type: ecosystems
        profile:
          data:
            id: 1
            type: profiles
        commit:
          data:
            id: 1
            type: commits

