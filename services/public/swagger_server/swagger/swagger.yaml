openapi: 3.0.0
info:
  title: Conan-CI Public
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: /
paths:
  /ping:
    get:
      summary: ping the service
      operationId: ping
      responses:
        "200":
          description: success
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /repo:
    get:
      summary: get all current repos
      operationId: get_repos
      responses:
        "200":
          description: list of repos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repo'
                x-content-type: application/json
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: add a new repo
      operationId: add_repo
      requestBody:
        description: repo to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repo'
      responses:
        "201":
          description: repo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /repo/{repoId}:
    delete:
      summary: delete a repo
      operationId: delete_repo
      parameters:
      - name: repoId
        in: path
        description: repo id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: repo deleted
        "400":
          description: invalid ID supplied
        "404":
          description: repo not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /profile:
    get:
      summary: get all active profiles
      operationId: get_profiles
      responses:
        "200":
          description: list of profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
                x-content-type: application/json
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: add a new profile
      operationId: add_profile
      requestBody:
        description: profile to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        "201":
          description: profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /profile/{profileId}:
    delete:
      summary: delete a profile
      operationId: delete_profile
      parameters:
      - name: profileId
        in: path
        description: profile id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: profile deleted
        "400":
          description: invalid ID supplied
        "404":
          description: profile not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /channel:
    get:
      summary: get all channels
      operationId: get_channels
      responses:
        "200":
          description: list of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
                x-content-type: application/json
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: add a new channel
      operationId: add_channel
      requestBody:
        description: channel to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        "201":
          description: channel created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /channel/{channelId}:
    delete:
      summary: delete a channel
      operationId: delete_channel
      parameters:
      - name: channelId
        in: path
        description: channel id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: channel deleted
        "400":
          description: invalid ID supplied
        "404":
          description: channel not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /populate-database:
    get:
      summary: Populate the database with sample data
      operationId: populate_database
      responses:
        "200":
          description: success
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /build/{buildStatus}:
    get:
      summary: get builds
      operationId: get_builds
      parameters:
      - name: buildStatus
        in: path
        description: build status
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: list of builds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Build'
                x-content-type: application/json
        "400":
          description: bad input parameter
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /put/{buildId}:
    put:
      summary: update a build
      operationId: update_build
      parameters:
      - name: buildId
        in: path
        description: id of the build to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        description: updated build data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
      responses:
        "200":
          description: updated build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        "400":
          description: invalid input, object invalid
        "404":
          description: build not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    Repo:
      required:
      - url
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        url:
          type: string
          example: https://github.com/uboot/conan-ci.git
        path:
          type: string
          example: packages/hello
      example:
        path: packages/hello
        id: 1
        url: https://github.com/uboot/conan-ci.git
    Profile:
      required:
      - container
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: GCC 9
        container:
          type: string
          example: conanio/gcc9
        settings:
          type: array
          items:
            $ref: '#/components/schemas/Setting'
      example:
        container: conanio/gcc9
        settings:
        - value: Release
          key: build_type
        - value: Release
          key: build_type
        name: GCC 9
        id: 1
    Setting:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
          example: build_type
        value:
          type: string
          example: Release
      example:
        value: Release
        key: build_type
    Channel:
      required:
      - branch
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: stable
        branch:
          type: string
          example: master
      example:
        name: stable
        id: 1
        branch: master
    Commit:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        sha:
          type: string
          example: 2777a37dc82e296d55c23f738b79f139e627920c
        repo:
          $ref: '#/components/schemas/Repo'
      example:
        repo:
          path: packages/hello
          id: 1
          url: https://github.com/uboot/conan-ci.git
        id: 1
        sha: 2777a37dc82e296d55c23f738b79f139e627920c
    Build:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        status:
          type: string
          example: new
          enum:
          - active
          - error
          - new
          - stopped
          - stopping
          - success
        commit:
          $ref: '#/components/schemas/Commit'
        profile:
          $ref: '#/components/schemas/Profile'
      example:
        profile:
          container: conanio/gcc9
          settings:
          - value: Release
            key: build_type
          - value: Release
            key: build_type
          name: GCC 9
          id: 1
        commit:
          repo:
            path: packages/hello
            id: 1
            url: https://github.com/uboot/conan-ci.git
          id: 1
          sha: 2777a37dc82e296d55c23f738b79f139e627920c
        id: 1
        status: new

