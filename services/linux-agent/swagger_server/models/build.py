# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.setting import Setting  # noqa: F401,E501
from swagger_server import util


class Build(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, url: str=None, commit: str=None, path: str=None, container: str=None, settings: List[Setting]=None):  # noqa: E501
        """Build - a model defined in Swagger

        :param id: The id of this Build.  # noqa: E501
        :type id: int
        :param url: The url of this Build.  # noqa: E501
        :type url: str
        :param commit: The commit of this Build.  # noqa: E501
        :type commit: str
        :param path: The path of this Build.  # noqa: E501
        :type path: str
        :param container: The container of this Build.  # noqa: E501
        :type container: str
        :param settings: The settings of this Build.  # noqa: E501
        :type settings: List[Setting]
        """
        self.swagger_types = {
            'id': int,
            'url': str,
            'commit': str,
            'path': str,
            'container': str,
            'settings': List[Setting]
        }

        self.attribute_map = {
            'id': 'id',
            'url': 'url',
            'commit': 'commit',
            'path': 'path',
            'container': 'container',
            'settings': 'settings'
        }
        self._id = id
        self._url = url
        self._commit = commit
        self._path = path
        self._container = container
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt) -> 'Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Build of this Build.  # noqa: E501
        :rtype: Build
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Build.


        :return: The id of this Build.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Build.


        :param id: The id of this Build.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self) -> str:
        """Gets the url of this Build.


        :return: The url of this Build.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Build.


        :param url: The url of this Build.
        :type url: str
        """

        self._url = url

    @property
    def commit(self) -> str:
        """Gets the commit of this Build.


        :return: The commit of this Build.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit: str):
        """Sets the commit of this Build.


        :param commit: The commit of this Build.
        :type commit: str
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")  # noqa: E501

        self._commit = commit

    @property
    def path(self) -> str:
        """Gets the path of this Build.


        :return: The path of this Build.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this Build.


        :param path: The path of this Build.
        :type path: str
        """

        self._path = path

    @property
    def container(self) -> str:
        """Gets the container of this Build.


        :return: The container of this Build.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this Build.


        :param container: The container of this Build.
        :type container: str
        """
        if container is None:
            raise ValueError("Invalid value for `container`, must not be `None`")  # noqa: E501

        self._container = container

    @property
    def settings(self) -> List[Setting]:
        """Gets the settings of this Build.


        :return: The settings of this Build.
        :rtype: List[Setting]
        """
        return self._settings

    @settings.setter
    def settings(self, settings: List[Setting]):
        """Sets the settings of this Build.


        :param settings: The settings of this Build.
        :type settings: List[Setting]
        """

        self._settings = settings
